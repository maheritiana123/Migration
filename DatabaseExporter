public class DatabaseExporter
{
    private readonly string _exportDirectory;
    private readonly IDatabaseExecutor _db; // Ton interface/framework maison pour ex√©cuter les requ√™tes

    public DatabaseExporter(IDatabaseExecutor db, string exportDirectory)
    {
        _db = db;
        _exportDirectory = exportDirectory;

        if (!Directory.Exists(_exportDirectory))
            Directory.CreateDirectory(_exportDirectory);
    }

    public void ExportAllTablesToCsv()
    {
        var tables = GetAllUserTables();

        foreach (var table in tables)
        {
            try
            {
                ExportTableToCsv(table);
                Console.WriteLine($"‚úÖ Export r√©ussi : {table}.csv");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur export {table} : {ex.Message}");
            }
        }
    }

    private List<string> GetAllUserTables()
    {
        // ‚ö†Ô∏è Adapter √† ta m√©thode maison (ici, exemple SQL Server)
        var query = @"
            SELECT TABLE_NAME 
            FROM INFORMATION_SCHEMA.TABLES
            WHERE TABLE_TYPE = 'BASE TABLE' 
            AND TABLE_SCHEMA = 'dbo'
        ";

        return _db.ExecuteQuery(query)
                  .Select(row => row[0].ToString())
                  .ToList();
    }

   private void ExportTableToCsv(string tableName)
   {
        var query = $"SELECT * FROM [{tableName}]";
        var result = _db.ExecuteQueryWithColumnNames(query); 
        // Doit retourner : (List<string> columnNames, List<object[]> rows)
    
        var columnNames = result.ColumnNames;
        var rows = result.Rows;
    
        if (rows.Count == 0)
        {
            Console.WriteLine($"‚ö† Table vide : {tableName}");
            return;
        }
    
        var csvPath = Path.Combine(_exportDirectory, $"{tableName}.csv");
    
        using var writer = new StreamWriter(csvPath, false, Encoding.UTF8);
    
        // üìå √âcrire l‚Äôen-t√™te
        writer.WriteLine(string.Join(";", columnNames.Select(EscapeCsvValue)));
    
        // üìå √âcrire les donn√©es
        foreach (var row in rows)
        {
            var line = string.Join(";", row.Select(EscapeCsvValue));
            writer.WriteLine(line);
        }
    }


    private string EscapeCsvValue(object value)
    {
        if (value == null) return "";
        var str = value.ToString();

        // √âchapper si pr√©sence de guillemets ou point-virgule
        if (str.Contains(";") || str.Contains("\""))
        {
            str = "\"" + str.Replace("\"", "\"\"") + "\"";
        }

        return str;
    }
}
