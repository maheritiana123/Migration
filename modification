-- 4) Construire & exécuter l’INSERT (version SCOPE_IDENTITY safe)
DECLARE @sql nvarchar(max);

IF @HasIdentity = 1 AND @IdentityCol IS NOT NULL
BEGIN
    -- Une seule ligne, on renvoie l’ID créé par CET insert (scope courant)
    SET @sql = N'SET NOCOUNT ON; ' +
               N'INSERT INTO ' + QUOTENAME(@TableName) + N' (' + @Columns + N') ' +
               N'SELECT ' + @values + N'; ' +
               N'SELECT CAST(SCOPE_IDENTITY() AS nvarchar(100)) AS NewID;';

    BEGIN TRY
        DECLARE @tmp TABLE (NewID nvarchar(100));
        INSERT INTO @tmp EXEC sp_executesql @sql;

        -- Normalement 1 seule ligne ; si >1 on garde la 1re pour rester robuste
        DECLARE @newId nvarchar(100) = (SELECT TOP (1) NewID FROM @tmp);
        INSERT INTO @out(RowIndex, NewID, ErrorMessage)
        VALUES (@i, @newId, NULL);
    END TRY
    BEGIN CATCH
        INSERT INTO @out(RowIndex, NewID, ErrorMessage)
        VALUES(@i, NULL, N'ERR: ' + ERROR_MESSAGE() + N' | vals=' + @values);
    END CATCH
END
ELSE
BEGIN
    -- Cas sans identity : insert simple
    SET @sql = N'SET NOCOUNT ON; ' +
               N'INSERT INTO ' + QUOTENAME(@TableName) + N' (' + @Columns + N') ' +
               N'SELECT ' + @values + N';';
    BEGIN TRY
        EXEC sp_executesql @sql;
        INSERT INTO @out(RowIndex, NewID, ErrorMessage) VALUES(@i, NULL, NULL);
    END TRY
    BEGIN CATCH
        INSERT INTO @out(RowIndex, NewID, ErrorMessage)
        VALUES(@i, NULL, N'ERR: ' + ERROR_MESSAGE() + N' | vals=' + @values);
    END CATCH
END