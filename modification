IF OBJECT_ID(N'[dbo].[batch_safe_insert_with_type_conversion]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[batch_safe_insert_with_type_conversion];
GO

CREATE PROCEDURE [dbo].[batch_safe_insert_with_type_conversion]
    @TableName      NVARCHAR(128),
    @Columns        NVARCHAR(MAX),   -- ex: [Col1],[Col2],...
    @ValuesBatch    NVARCHAR(MAX),   -- lignes séparées par CHAR(30), valeurs (tokens) par CHAR(31)
    @HasIdentity    BIT = 0,
    @IdentityCol    NVARCHAR(128) = NULL  -- peut rester NULL : auto-détection
AS
BEGIN
    SET NOCOUNT ON;
    SET LOCK_TIMEOUT 5000;          -- évite les blocages trop longs
    SET DEADLOCK_PRIORITY LOW;      -- limite les deadlocks

    -------------------------------------------------------------------------
    -- Prépare la liste des colonnes insérées (ordonnées)
    -------------------------------------------------------------------------
    DECLARE @colList TABLE (ColName NVARCHAR(128), Ord INT);
    INSERT INTO @colList (ColName, Ord)
    SELECT LTRIM(RTRIM(REPLACE(REPLACE(value, '[', ''), ']', ''))),
           ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
    FROM STRING_SPLIT(@Columns, ',');

    -------------------------------------------------------------------------
    -- Détection de la colonne IDENTITY si @HasIdentity = 1 et pas fournie
    -------------------------------------------------------------------------
    IF @HasIdentity = 1 AND (@IdentityCol IS NULL OR LEN(@IdentityCol)=0)
    BEGIN
        SELECT TOP 1 @IdentityCol = COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = @TableName
          AND COLUMNPROPERTY(OBJECT_ID(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1;
    END

    -------------------------------------------------------------------------
    -- Colonnes PK/UK hors colonne identity (pour détection des doublons)
    -------------------------------------------------------------------------
    DECLARE @pkCols NVARCHAR(MAX) = NULL;
    SELECT @pkCols = STRING_AGG(QUOTENAME(kcu.COLUMN_NAME), ',')
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
      ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
     AND tc.TABLE_NAME = kcu.TABLE_NAME
    WHERE tc.TABLE_NAME = @TableName
      AND tc.CONSTRAINT_TYPE IN ('PRIMARY KEY','UNIQUE')
      AND kcu.COLUMN_NAME <> ISNULL(@IdentityCol, '');

    -------------------------------------------------------------------------
    -- Sépare le batch en lignes (RowIndex = ordre 1..N)
    -------------------------------------------------------------------------
    DECLARE @rows TABLE (RowIndex INT IDENTITY(1,1), Tokens NVARCHAR(MAX));
    INSERT INTO @rows (Tokens)
    SELECT value
    FROM STRING_SPLIT(ISNULL(@ValuesBatch, N''), CHAR(30))
    WHERE LEN(RTRIM(LTRIM(value))) > 0;

    -------------------------------------------------------------------------
    -- Résultats par ligne : RowIndex / NewID / ErrorMessage
    -------------------------------------------------------------------------
    DECLARE @out TABLE (RowIndex INT, NewID NVARCHAR(100), ErrorMessage NVARCHAR(MAX));

    DECLARE @i INT = 1, @n INT = (SELECT COUNT(*) FROM @rows);
    WHILE @i <= @n
    BEGIN
        DECLARE @tokens NVARCHAR(MAX) = (SELECT Tokens FROM @rows WHERE RowIndex=@i);

        -- 1) Split des valeurs (CHAR(31)) dans @valList
        DECLARE @valList TABLE (Val NVARCHAR(MAX), Ord INT);
        IF @tokens IS NOT NULL AND LEN(@tokens) > 0
        BEGIN
            INSERT INTO @valList (Val, Ord)
            SELECT LTRIM(RTRIM(value)),
                   ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
            FROM STRING_SPLIT(@tokens, CHAR(31));
        END

        -- 2) ⚖️ Normaliser: nb valeurs == nb colonnes
        DECLARE @colCount INT = (SELECT COUNT(*) FROM @colList);
        DECLARE @valCount INT = (SELECT COUNT(*) FROM @valList);

        IF @valCount <> @colCount
        BEGIN
            -- Message d'info (non bloquant) pour diagnostiquer
            INSERT INTO @out (RowIndex, NewID, ErrorMessage)
            VALUES (
                @i, NULL,
                CONCAT(
                    N'Mismatch cols/vals (auto-fix): cols=', @colCount, N' / vals=', @valCount,
                    N' | Columns=', @Columns,
                    N' | Tokens=', REPLACE(ISNULL(@tokens, N''), CHAR(31), N'|')
                )
            );

            -- Trop de valeurs → tronquer aux @colCount premières
            IF @valCount > @colCount
            BEGIN
                ;WITH v AS (
                    SELECT Val, Ord, ROW_NUMBER() OVER (ORDER BY Ord) AS rn
                    FROM @valList
                )
                DELETE FROM @valList;

                INSERT INTO @valList (Val, Ord)
                SELECT Val, rn
                FROM v
                WHERE rn <= @colCount
                ORDER BY rn;
            END
            -- Pas assez de valeurs → compléter avec NULL
            ELSE
            BEGIN
                DECLARE @k INT = @valCount + 1;
                WHILE @k <= @colCount
                BEGIN
                    INSERT INTO @valList (Val, Ord) VALUES (N'NULL', @k);
                    SET @k += 1;
                END
            END
        END

        ---------------------------------------------------------------------
        -- 3) Détection de doublon selon PK/UK (si présentes)
        ---------------------------------------------------------------------
        DECLARE @whereClause NVARCHAR(MAX) = N'';
        IF @pkCols IS NOT NULL AND LEN(@pkCols) > 0
        BEGIN
            DECLARE @conds TABLE (Cond NVARCHAR(MAX), Ord INT);
            INSERT INTO @conds (Cond, Ord)
            SELECT
                CASE WHEN UPPER(v.Val) = 'NULL'
                     THEN QUOTENAME(c.ColName) + ' IS NULL'
                     ELSE QUOTENAME(c.ColName) + ' = ' + v.Val END,
                c.Ord
            FROM @colList c
            JOIN @valList v ON c.Ord = v.Ord
            WHERE c.ColName IN (
                SELECT LTRIM(RTRIM(REPLACE(REPLACE(p.value, '[', ''), ']', '')))
                FROM STRING_SPLIT(@pkCols, ',') p
            );

            SELECT @whereClause = STRING_AGG(Cond, ' AND ') WITHIN GROUP (ORDER BY Ord)
            FROM @conds;

            IF LEN(@whereClause) > 0
            BEGIN
                DECLARE @exists BIT = 0;
                DECLARE @checkSql NVARCHAR(MAX) =
                    N'SELECT @out = CASE WHEN EXISTS (SELECT 1 FROM '
                    + QUOTENAME(@TableName) + ' WITH (NOLOCK) WHERE ' + @whereClause + N') THEN 1 ELSE 0 END';

                EXEC sp_executesql @checkSql, N'@out BIT OUTPUT', @out=@exists OUTPUT;

                IF @exists = 1
                BEGIN
                    INSERT INTO @out (RowIndex, NewID, ErrorMessage) VALUES (@i, NULL, N'Doublon');
                    SET @i += 1;
                    CONTINUE;
                END
            END
        END

        ---------------------------------------------------------------------
        -- 4) Construire la liste des valeurs pour INSERT
        ---------------------------------------------------------------------
        DECLARE @values NVARCHAR(MAX) = N'';
        SELECT @values = STRING_AGG(Val, ',') WITHIN GROUP (ORDER BY Ord)
        FROM @valList;

        IF LEN(ISNULL(@values, '')) = 0
            SET @values = N'NULL';

        ---------------------------------------------------------------------
        -- 5) Construire et exécuter l'INSERT (une ligne)
        ---------------------------------------------------------------------
        DECLARE @sql NVARCHAR(MAX) = N'INSERT INTO ' + QUOTENAME(@TableName) + ' (' + @Columns + ') ';
        IF @HasIdentity = 1 AND @IdentityCol IS NOT NULL
            SET @sql += N'OUTPUT INSERTED.' + QUOTENAME(@IdentityCol) + ' AS NewID ';
        SET @sql += N'SELECT ' + @values;

        BEGIN TRY
            IF @HasIdentity = 1 AND @IdentityCol IS NOT NULL
            BEGIN
                DECLARE @tmp TABLE (NewID NVARCHAR(100));
                INSERT INTO @tmp EXEC sp_executesql @sql;

                INSERT INTO @out (RowIndex, NewID, ErrorMessage)
                SELECT @i, NewID, NULL FROM @tmp;
            END
            ELSE
            BEGIN
                EXEC sp_executesql @sql;
                INSERT INTO @out (RowIndex, NewID, ErrorMessage) VALUES (@i, NULL, NULL);
            END
        END TRY
        BEGIN CATCH
            INSERT INTO @out (RowIndex, NewID, ErrorMessage)
            VALUES (
                @i, NULL,
                LEFT(CONCAT(N'ERR: ', ERROR_MESSAGE(), N' | vals=', @values), 400)
            );
        END CATCH

        SET @i += 1;
    END

    -------------------------------------------------------------------------
    -- Retour des résultats du batch (1 ligne par ligne d'entrée)
    -------------------------------------------------------------------------
    SELECT RowIndex, NewID, ErrorMessage
    FROM @out
    ORDER BY RowIndex;
END
GO