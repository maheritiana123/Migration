/******************************************************************************
 * Procédure [batch_safe_insert_with_type_conversion] :
 * [batch_safe_insert_with_type_conversion]
 ******************************************************************************/
IF OBJECT_ID(N'[dbo].[batch_safe_insert_with_type_conversion]', N'P') IS NOT NULL
DROP PROCEDURE [dbo].[batch_safe_insert_with_type_conversion]
GO

CREATE PROCEDURE [dbo].[batch_safe_insert_with_type_conversion]
    @TableName NVARCHAR(128),
    @Columns NVARCHAR(MAX),
    @Values NVARCHAR(MAX),
    @HasIdentity BIT = 0
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @sql NVARCHAR(MAX);
    DECLARE @output TABLE (NewID INT);
    
    -- Construire la requête avec TRY_CONVERT pour les dates
    SET @sql = N'INSERT INTO ' + QUOTENAME(@TableName) + ' (' + @Columns + ') ';
    
    IF @HasIdentity = 1
        SET @sql = @sql + N'OUTPUT INSERTED.' + 
                  (SELECT TOP 1 COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS 
                   WHERE TABLE_NAME = @TableName AND COLUMNPROPERTY(OBJECT_ID(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1) + ' AS NewID ';
    
    -- Conversion sécurisée des valeurs
    DECLARE @convertedValues NVARCHAR(MAX) = N'';
    
    WITH ValueCTE AS (
        SELECT 
            value,
            ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn
        FROM STRING_SPLIT(REPLACE(@Values, '''', ''), ',')
    )
    SELECT @convertedValues = @convertedValues + 
           CASE 
               WHEN value LIKE '''%''' THEN  -- Chaîne entre guillemets
                   CASE 
                       WHEN TRY_CONVERT(DATETIME, REPLACE(value, '''', '')) IS NOT NULL 
                           THEN 'TRY_CONVERT(DATETIME, ' + value + ')'
                       WHEN TRY_CONVERT(DECIMAL(18,6), REPLACE(value, '''', '')) IS NOT NULL 
                           THEN 'TRY_CONVERT(DECIMAL(18,6), ' + value + ')'
                       ELSE value
                   END
               ELSE value  -- Valeurs numériques ou NULL
           END + ','
    FROM ValueCTE;
    
    -- Supprimer la dernière virgule
    SET @convertedValues = LEFT(@convertedValues, LEN(@convertedValues) - 1);
    
    SET @sql = @sql + N'SELECT ' + @convertedValues;
    
    BEGIN TRY
        IF @HasIdentity = 1
            INSERT INTO @output EXEC sp_executesql @sql;
        ELSE
            EXEC sp_executesql @sql;
            
        SELECT NewID FROM @output;
    END TRY
    BEGIN CATCH
        SELECT 
            NULL AS NewID,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
