// colonnes Ã  exclure de l'INSERT (computed/rowversion)
private HashSet<string> GetNotInsertableColumns(string table)
{
    var cols = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

    // Computed
    {
        var sql = new DynamicSql { Dsn = "PXE1_PXE" };
        sql.AddDirectRequest(@"
            SELECT c.name AS ColName
            FROM sys.computed_columns cc
            JOIN sys.columns c ON c.object_id = cc.object_id AND c.column_id = cc.column_id
            JOIN sys.objects o ON o.object_id = c.object_id
            WHERE o.name = $t$;", MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
        sql.SetSecureParam("t", table, true, 0);
        sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
        sql.Execute(30000);
        for (int i=1;i<=sql.ReturnedRows(1,1);i++)
            cols.Add(sql.GetValueUsingColName(i, "ColName", 1, 1));
    }

    // rowversion/timestamp
    {
        var sql2 = new DynamicSql { Dsn = "PXE1_PXE" };
        sql2.AddDirectRequest(@"
            SELECT COLUMN_NAME
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE TABLE_NAME = $t$
              AND DATA_TYPE IN ('timestamp','rowversion');", MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
        sql2.SetSecureParam("t", table, true, 0);
        sql2.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
        sql2.Execute(30000);
        for (int i=1;i<=sql2.ReturnedRows(1,1);i++)
            cols.Add(sql2.GetValueUsingColName(i, "COLUMN_NAME", 1, 1));
    }

    return cols;
}

var notInsertable = GetNotInsertableColumns(tableName);
var insertCols = columnNames
    .Where(c => (!hasIdentity || !c.Equals(identityColumn, StringComparison.OrdinalIgnoreCase))
                && !notInsertable.Contains(c))
    .ToList();