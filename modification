private void GetAllTables()
{
    _importOrder.Clear();
    _pureRelations.Clear();
    _extendedRelations.Clear();

    var query = @"
        SELECT TABLE_NAME 
        FROM INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_TYPE = 'BASE TABLE'
        ORDER BY TABLE_NAME
    ";

    DynamicSql sql = new DynamicSql();
    sql.Dsn = "PXE1_PXE";
    sql.AddDirectRequest(query, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
    sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
    sql.Execute(30000);

    var rowCount = sql.ReturnedRows(1, 1);

    for (int i = 1; i <= rowCount; i++)
    {
        var tableName = sql.GetValueUsingColName(i, "TABLE_NAME", 1, 1);

        // Ignorer si table dans la liste noire
        if (_ignoredTables.Contains(tableName, StringComparer.OrdinalIgnoreCase))
            continue;

        // Analyse de la structure
        var columns = GetTableColumnNames(tableName);
        var fks = GetForeignKeyInfo(tableName);
        var pkColumns = GetPrimaryKeyColumns(tableName);

        if (fks.Count == 2 && columns.Count == 2 && pkColumns.Count == 2)
        {
            // Relation pure (2 FK uniquement)
            _pureRelations.Add(tableName);
        }
        else if (fks.Count >= 1 && columns.Count > fks.Count)
        {
            // Relation Ã©tendue (FK + colonnes supplÃ©mentaires)
            _extendedRelations.Add(tableName);
        }
        else
        {
            // Table normale
            _importOrder.Add(tableName);
        }
    }

    Console.WriteLine($"ðŸ“‹ Tables normales : {_importOrder.Count}");
    Console.WriteLine($"ðŸ“‹ Relations pures : {_pureRelations.Count}");
    Console.WriteLine($"ðŸ“‹ Relations Ã©tendues : {_extendedRelations.Count}");
}
