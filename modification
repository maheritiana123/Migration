private void ImportTable(string tableName)
{
    Console.WriteLine($"‚ñ∂Ô∏è Import de la table : {tableName}");

    var csvPath = Path.Combine(_importDirectory, $"{tableName}.csv");
    if (!File.Exists(csvPath))
    {
        Console.WriteLine($"‚ö† Fichier CSV introuvable pour {tableName}, import ignor√©.");
        return;
    }

    var lines = File.ReadAllLines(csvPath, Encoding.UTF8);
    if (lines.Length <= 1)
    {
        Console.WriteLine($"‚ö† CSV vide pour {tableName}");
        return;
    }

    // üìå Lecture de l'en-t√™te
    var headers = lines[0].Split(';').Select(h => h.Trim()).ToArray();

    // üìå R√©cup√©ration de la structure r√©elle de la table en base
    var tableColumns = GetTableColumnNames(tableName);

    // üìå Mapping CSV -> index
    var headerMap = headers
        .Select((name, idx) => new { name, idx })
        .ToDictionary(x => x.name, x => x.idx, StringComparer.OrdinalIgnoreCase);

    ExecuteInTransaction(() =>
    {
        // üìå Boucle sur toutes les lignes de donn√©es
        for (int lineIndex = 1; lineIndex < lines.Length; lineIndex++)
        {
            var cells = lines[lineIndex].Split(';');

            // üîπ Construction des valeurs pour les colonnes existantes
            var insertValues = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);

            foreach (var col in tableColumns)
            {
                if (headerMap.TryGetValue(col, out var csvIndex) && csvIndex < cells.Length)
                {
                    insertValues[col] = string.IsNullOrEmpty(cells[csvIndex]) ? null : cells[csvIndex];
                }
                else
                {
                    // Colonne manquante dans le CSV ‚Üí NULL
                    insertValues[col] = null;
                }
            }

            // üìå Mapping des FK par nom de colonne
            var fkInfos = GetForeignKeyInfo(tableName);
            foreach (var fk in fkInfos)
            {
                if (insertValues.TryGetValue(fk.ColumnName, out var val) && !string.IsNullOrEmpty(val))
                {
                    if (_idMappings.TryGetValue(fk.ReferencedTableName, out var mapping) &&
                        mapping.TryGetValue(val, out var newId))
                    {
                        insertValues[fk.ColumnName] = newId;
                    }
                    else
                    {
                        // Si FK non trouv√©e mais nullable ‚Üí mettre NULL
                        if (fk.IsNullable)
                            insertValues[fk.ColumnName] = null;
                        else
                            throw new Exception($"[Erreur FK] Valeur '{val}' introuvable pour {fk.ColumnName} dans {tableName}");
                    }
                }
            }

            // üìå Construction de la requ√™te INSERT
            var colNames = string.Join(", ", insertValues.Keys.Select(c => $"[{c}]"));
            var colValues = string.Join(", ", insertValues.Values.Select(v => v == null ? "NULL" : $"'{v.Replace("'", "''")}'"));

            var insertSql = $"INSERT INTO [{tableName}] ({colNames}) VALUES ({colValues})";

            // üìå Ex√©cution via ton framework maison
            DynamicSql sql = new DynamicSql();
            sql.Dsn = "PXE1_PXE";
            sql.AddDirectRequest(insertSql, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
            sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
            sql.Execute(30000);
        }
    });
}
private void ImportPureRelationTable(string tableName)
{
    Console.WriteLine($"‚ñ∂Ô∏è Import de la relation pure : {tableName}");
    ImportTableCommon(tableName, isPureRelation: true);
}

private void ImportExtendedRelationTable(string tableName)
{
    Console.WriteLine($"‚ñ∂Ô∏è Import de la relation √©tendue : {tableName}");
    ImportTableCommon(tableName, isPureRelation: false);
}
private void ImportTableCommon(string tableName, bool isPureRelation)
{
    var csvPath = Path.Combine(_importDirectory, $"{tableName}.csv");
    if (!File.Exists(csvPath))
    {
        Console.WriteLine($"‚ö† Fichier CSV introuvable pour {tableName}, import ignor√©.");
        return;
    }

    var lines = File.ReadAllLines(csvPath, Encoding.UTF8);
    if (lines.Length <= 1)
    {
        Console.WriteLine($"‚ö† CSV vide pour {tableName}");
        return;
    }

    // üìå Lecture de l'en-t√™te
    var headers = lines[0].Split(';').Select(h => h.Trim()).ToArray();

    // üìå Colonnes r√©elles de la table en base
    var tableColumns = GetTableColumnNames(tableName);

    // üìå Mapping nom colonne CSV -> index
    var headerMap = headers
        .Select((name, idx) => new { name, idx })
        .ToDictionary(x => x.name, x => x.idx, StringComparer.OrdinalIgnoreCase);

    ExecuteInTransaction(() =>
    {
        for (int lineIndex = 1; lineIndex < lines.Length; lineIndex++)
        {
            var cells = lines[lineIndex].Split(';');

            var insertValues = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);

            foreach (var col in tableColumns)
            {
                if (headerMap.TryGetValue(col, out var csvIndex) && csvIndex < cells.Length)
                {
                    insertValues[col] = string.IsNullOrEmpty(cells[csvIndex]) ? null : cells[csvIndex];
                }
                else
                {
                    insertValues[col] = null;
                }
            }

            // üìå Mapping FK (m√™me logique pour pure/√©tendue)
            var fkInfos = GetForeignKeyInfo(tableName);
            foreach (var fk in fkInfos)
            {
                if (insertValues.TryGetValue(fk.ColumnName, out var val) && !string.IsNullOrEmpty(val))
                {
                    if (_idMappings.TryGetValue(fk.ReferencedTableName, out var mapping) &&
                        mapping.TryGetValue(val, out var newId))
                    {
                        insertValues[fk.ColumnName] = newId;
                    }
                    else
                    {
                        if (fk.IsNullable)
                            insertValues[fk.ColumnName] = null;
                        else
                            throw new Exception($"[Erreur FK] Valeur '{val}' introuvable pour {fk.ColumnName} dans {tableName}");
                    }
                }
            }

            // üìå Construction INSERT
            var colNames = string.Join(", ", insertValues.Keys.Select(c => $"[{c}]"));
            var colValues = string.Join(", ", insertValues.Values.Select(v => v == null ? "NULL" : $"'{v.Replace("'", "''")}'"));
            var insertSql = $"INSERT INTO [{tableName}] ({colNames}) VALUES ({colValues})";

            // üìå Ex√©cution via framework maison
            DynamicSql sql = new DynamicSql();
            sql.Dsn = "PXE1_PXE";
            sql.AddDirectRequest(insertSql, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
            sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
            sql.Execute(30000);
        }
    });
}
private List<string> GetTableColumnNames(string tableName)
{
    var query = $@"
        SELECT COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = '{tableName}'
        ORDER BY ORDINAL_POSITION
    ";

    DynamicSql sql = new DynamicSql();
    sql.Dsn = "PXE1_PXE";
    sql.AddDirectRequest(query, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
    sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
    sql.Execute(30000);

    var colCount = sql.ReturnedRows(1, 1);
    var result = new List<string>();

    for (int r = 1; r <= colCount; r++)
    {
        var colName = sql.GetValueUsingColName(r, "COLUMN_NAME", 1, 1);
        if (!string.IsNullOrEmpty(colName))
            result.Add(colName);
    }

    return result;
}
