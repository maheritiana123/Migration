public class DatabaseMigrator
{
    private readonly HashSet<string> _pureRelations = new();
    private readonly HashSet<string> _extendedRelations = new();
    private readonly HashSet<string> _importedTables = new();
    private readonly Dictionary<string, Dictionary<string, string>> _idMappings = new();

    public void PerformMigration(bool disableForeignKeys = true)
    {
        LoadRelationTables(); // Remplit _pureRelations et _extendedRelations

        if (disableForeignKeys)
            DisableAllForeignKeys();

        try
        {
            var orchestrator = new MigrationOrchestrator(
                _pureRelations,
                _extendedRelations,
                _idMappings,
                GetForeignKeyInfo,
                ImportTable,
                ImportPureRelationTable,
                ImportExtendedRelationTable,
                GetAllTables
            );

            orchestrator.PerformGlobalImport();
        }
        finally
        {
            if (disableForeignKeys)
            {
                EnableAllForeignKeys();
                ValidateDataIntegrity();
            }
        }
    }

    // üß± √Ä impl√©menter selon ta logique existante

    private void ImportTable(string tableName)
    {
        ExecuteInTransaction(() =>
        {
            Console.WriteLine($"‚ñ∂Ô∏è Import de la table : {tableName}");
            // 1. Charger les donn√©es (depuis CSV par exemple)
            // 2. Mapper les FK √† partir de _idMappings
            // 3. Construire et ex√©cuter les requ√™tes d'insertion
        });
    }

    private void ImportPureRelationTable(string tableName)
    {
        ExecuteInTransaction(() =>
        {
            Console.WriteLine($"‚ñ∂Ô∏è Import de la relation pure : {tableName}");
            // Logique similaire : charger, mapper FK, ins√©rer
        });
    }

    private void ImportExtendedRelationTable(string tableName)
    {
        ExecuteInTransaction(() =>
        {
            Console.WriteLine($"‚ñ∂Ô∏è Import de la relation √©tendue : {tableName}");
            // Avec colonnes m√©tier + mapping FK
        });
    }

    private List<string> GetAllTables()
    {
        // Retourne la liste compl√®te des tables √† migrer (ordre non important ici)
        // Peut venir d‚Äôun fichier config, sch√©ma de BDD, ou analyse des fichiers CSV
        throw new NotImplementedException();
    }

    private List<ForeignKeyInfo> GetForeignKeyInfo(string tableName)
    {
        // Retourne les FK de la table (√† partir de ton parser de sch√©ma par exemple)
        throw new NotImplementedException();
    }

    private void DisableAllForeignKeys()
    {
        Console.WriteLine("üîí D√©sactivation des contraintes FK...");
        // Impl√©menter selon ton SGBD (ex : ALTER TABLE ... NOCHECK)
    }

    private void EnableAllForeignKeys()
    {
        Console.WriteLine("üîì R√©activation des contraintes FK...");
        // Impl√©menter selon ton SGBD (ex : ALTER TABLE ... CHECK CONSTRAINT ALL)
    }

    private void ValidateDataIntegrity()
    {
        Console.WriteLine("‚úÖ Validation de l'int√©grit√© des donn√©es...");
        // Tu peux utiliser : DBCC CHECKCONSTRAINTS ou autre commande selon ton SGBD
    }

    private void ExecuteInTransaction(Action action)
    {
        // M√©thode centrale √† adapter selon ton moteur :
        // - Begin transaction
        // - Try { action(); Commit } Catch { Rollback; throw }
        throw new NotImplementedException();
    }

    private void LoadRelationTables()
    {
        // Charge les noms dans _pureRelations et _extendedRelations selon ta logique
        // Exemple : analyse des noms de fichiers, ou fichier de conf
    }
}