private void ExportTableToCsv(string tableName)
{
    var query = $"SELECT * FROM [{tableName}]";

    DynamicSql sql = new DynamicSql();
    sql.Dsn = "PXE1_PXE";
    sql.AddDirectRequest(query, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
    sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
    sql.Execute(30000);

    int colCount = sql.ReturnedCols(1, 1);
    int rowCount = sql.ReturnedRows(1, 1);

    if (rowCount == 0)
    {
        Console.WriteLine($"⚠ Table vide : {tableName}");
        return;
    }

    var csvPath = Path.Combine(_exportDirectory, $"{tableName}.csv");

    using var writer = new StreamWriter(csvPath, false, Encoding.UTF8);

    // 1️⃣ Récupérer l’en-tête
    var columnNames = new List<string>();
    for (int c = 1; c <= colCount; c++)
    {
        columnNames.Add(sql.GetColName(c, 1, 1));
    }
    writer.WriteLine(string.Join(";", columnNames.Select(EscapeCsvValue)));

    // 2️⃣ Parcourir toutes les lignes et écrire directement
    for (int r = 1; r <= rowCount; r++)
    {
        var values = new List<string>();
        foreach (var col in columnNames)
        {
            var value = sql.GetValueUsingColName(r, col, 1, 1);
            values.Add(EscapeCsvValue(value));
        }
        writer.WriteLine(string.Join(";", values));
    }

    Console.WriteLine($"✅ Export terminé : {tableName} ({rowCount} lignes)");
}

private string EscapeCsvValue(object value)
{
    if (value == null) return "";
    var str = value.ToString();
    if (str.Contains(";") || str.Contains("\""))
        str = "\"" + str.Replace("\"", "\"\"") + "\"";
    return str;
}
