private (List<string> ordered, List<string> cyclicTables) SortTablesByDependencies(List<string> tables)
{
    var sorted = new List<string>();
    var visited = new HashSet<string>();
    var visiting = new HashSet<string>();
    var cyclicTables = new HashSet<string>();

    void Visit(string table)
    {
        if (visited.Contains(table))
            return;

        if (visiting.Contains(table))
        {
            Console.WriteLine($"⚠ Cycle détecté impliquant la table {table}");
            cyclicTables.Add(table);
            return;
        }

        visiting.Add(table);

        var fks = GetForeignKeyInfo(table)
            .Where(fk => tables.Contains(fk.ReferencedTableName))
            .Select(fk => fk.ReferencedTableName)
            .Distinct();

        foreach (var dep in fks)
        {
            Visit(dep);
        }

        visiting.Remove(table);
        visited.Add(table);
        sorted.Add(table);
    }

    foreach (var table in tables)
        Visit(table);

    return (sorted, cyclicTables.ToList());
}
