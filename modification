private Dictionary<string, object> ValidateAndMapForeignKeys(Dictionary<string, object> record, List<ForeignKeyInfo> fkInfo)
{
    var result = new Dictionary<string, object>();

    foreach (var fk in fkInfo)
    {
        if (!record.ContainsKey(fk.ColumnName))
        {
            Console.WriteLine($"[ERREUR] Colonne FK manquante : {fk.ColumnName}");
            return null;
        }

        var originalValue = record[fk.ColumnName];

        // Si la valeur est NULL, on vérifie si la colonne l'accepte
        if (originalValue == null || originalValue.ToString() == "")
        {
            bool nullable = IsForeignKeyNullable(fk);
            if (nullable)
            {
                result[fk.ColumnName] = null; // autorisé => on garde la ligne
                continue;
            }
            else
            {
                Console.WriteLine($"[ERREUR] Valeur NULL interdite pour {fk.ColumnName} dans {fk.ReferencedTableName}");
                return null; // on rejette si NON NULL
            }
        }

        // On vérifie que la table de mapping est bien là
        if (!_idMappings.ContainsKey(fk.ReferencedTableName))
        {
            Console.WriteLine($"[ERREUR] Mapping manquant pour : {fk.ReferencedTableName}");
            return null;
        }

        if (!_idMappings[fk.ReferencedTableName].TryGetValue(originalValue, out var newId))
        {
            Console.WriteLine($"[ERREUR] Valeur FK introuvable : {fk.ColumnName}={originalValue} dans {fk.ReferencedTableName}");
            return null;
        }

        result[fk.ColumnName] = newId;
    }

    return result;
}

private bool IsForeignKeyNullable(ForeignKeyInfo fk)
{
    DynamicSql sql = new DynamicSql { Dsn = "PXE1_PXE" };
    sql.AddDirectRequest(@"
        SELECT is_nullable
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = $table$
        AND COLUMN_NAME = $col$",
        MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);

    sql.SetSecureParam("table", fk.TableName, true, 0);
    sql.SetSecureParam("col", fk.ColumnName, true, 0);
    sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
    sql.Execute();

    if (sql.ReturnedRows(1, 1) > 0)
    {
        string nullable = sql.GetValueUsingColName(1, "is_nullable", 1, 1);
        return nullable == "YES";
    }

    return false; // si on ne sait pas, on préfère bloquer
}