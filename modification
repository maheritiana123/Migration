private static bool TryParseSimpleDefault(string defaultDef, out object value)
{
    value = null;
    if (string.IsNullOrWhiteSpace(defaultDef)) return false;

    // enlève les parenthèses autour de ((…))
    var s = defaultDef.Trim();
    while (s.Length > 1 && s.StartsWith("(") && s.EndsWith(")"))
        s = s.Substring(1, s.Length - 2).Trim();

    if (string.Equals(s, "NULL", StringComparison.OrdinalIgnoreCase))
        return false;

    // DEFAULT N'abc' / 'abc'
    if (s.StartsWith("N'", StringComparison.Ordinal) || s.StartsWith("'", StringComparison.Ordinal))
    {
        var start = s.StartsWith("N'") ? 2 : 1;
        if (s.EndsWith("'") && s.Length >= start + 1)
        {
            var inner = s.Substring(start, s.Length - start - 1).Replace("''", "'");
            value = inner;                  // chaîne .NET -> sera quotée par BuildValuesBatch
            return true;
        }
    }

    // entier / décimal simple
    if (int.TryParse(s, NumberStyles.Integer, CultureInfo.InvariantCulture, out var i)) { value = i; return true; }
    if (decimal.TryParse(s, NumberStyles.Number, CultureInfo.InvariantCulture, out var d)) { value = d; return true; }

    // expressions connues: CONVERT(...), CAST(...), GETDATE()...
    if (s.StartsWith("CONVERT(", StringComparison.OrdinalIgnoreCase) ||
        s.StartsWith("CAST(", StringComparison.OrdinalIgnoreCase) ||
        s.Equals("GETDATE()", StringComparison.OrdinalIgnoreCase))
    { value = s; return true; }

    return false;
}

private static object GetTypeFallback(string sqlDataType)
{
    var dt = (sqlDataType ?? "").ToLowerInvariant();

    // chaînes
    if (dt.Contains("char") || dt.Contains("text") || dt.Contains("xml"))
        return "";                         // chaîne vide => N'' (pas NULL)

    // booléen
    if (dt == "bit") return 0;

    // entiers
    if (dt is "int" or "bigint" or "smallint" or "tinyint") return 0;

    // numériques
    if (dt.Contains("decimal") || dt.Contains("numeric") || dt.Contains("money") || dt.Contains("float") || dt.Contains("real"))
        return 0;

    // dates
    if (dt.Contains("date") || dt.Contains("time"))
        return "CONVERT(datetime2(0),'1900-01-01T00:00:00',126)"; // **expression SQL brute**

    // binaire => vide
    if (dt.Contains("varbinary") || dt.Contains("binary") || dt.Contains("image"))
        return "0x";                         // vide

    // par défaut, chaîne vide (sûr et non NULL)
    return "";
}