IF @exists = 1
BEGIN
    DECLARE @dupId nvarchar(100) = NULL;

    IF @HasIdentity = 1 AND @IdentityCol IS NOT NULL AND LEN(ISNULL(@whereClause,N'')) > 0
    BEGIN
        DECLARE @selDupSql nvarchar(max) =
            N'SELECT @nid = CONVERT(nvarchar(100), ' + QUOTENAME(@IdentityCol) + N') ' +
            N'FROM ' + QUOTENAME(@TableName) + N' WITH (NOLOCK) WHERE ' + @whereClause + N';';

        EXEC sp_executesql
             @selDupSql,
             N'@nid nvarchar(100) OUTPUT',
             @nid = @dupId OUTPUT;
    END

    INSERT INTO @out(RowIndex, NewID, ErrorMessage)
    VALUES(@rowIdx, @dupId, N'Doublon');  -- ⚠️ NewID peut être NULL si pas d’identity
    CONTINUE;
END



if (!string.IsNullOrEmpty(errorMessage) && errorMessage.Equals("Doublon", StringComparison.OrdinalIgnoreCase))
{
    duplicateCount++;

    // ➜ NOUVEAU : si la proc nous a renvoyé l'ID existant, on mappe quand même
    if (hasIdentity && !string.IsNullOrEmpty(newId) && !string.IsNullOrEmpty(oldId))
    {
        if (!_idMappings.ContainsKey(tableName))
            _idMappings[tableName] = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

        _idMappings[tableName][oldId] = newId;
    }

    continue;
}