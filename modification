private void ImportTableCommon(string tableName, bool forceNullFK = false)
{
    Console.WriteLine("_______________________");
    Console.WriteLine($"Import table {tableName}");

    string csvPath = Path.Combine(
        _importPath, 
        $"Export_Migration_{tableName}_{Environment.GetEnvironmentVariable("PFTLSITE")}.csv"
    );

    if (!File.Exists(csvPath))
    {
        Console.WriteLine($"‚ö† CSV introuvable : {tableName}");
        return;
    }

    var lines = File.ReadAllLines(csvPath);
    if (lines.Length < 2)
    {
        Console.WriteLine($"‚ö† CSV vide : {tableName}");
        return;
    }

    // Lecture en-t√™te CSV
    var columnNames = lines[0].Split(';').Select(c => c.Trim()).ToList();

    // Info PK, FK, Identity
    var pkColumns = GetPrimaryKeyColumn(tableName);
    var identityColumn = GetIdentityColumn(tableName);
    var fkInfos = GetForeignKeyInfo(tableName);

    bool hasIdentity = !string.IsNullOrEmpty(identityColumn);

    Console.WriteLine($"{lines.Length - 1} lignes √† importer");

    for (int i = 1; i < lines.Length; i++)
    {
        var values = lines[i].Split(';').ToList();

        // Mapping colonnes/valeurs
        var rowDict = columnNames.Zip(values, (col, val) => new { col, val })
                                 .ToDictionary(x => x.col, x => x.val);

        // Si table avec IDENTITY ‚Üí on retire la colonne IDENTITY de l'insert
        string oldId = null;
        if (hasIdentity && rowDict.ContainsKey(identityColumn))
        {
            oldId = rowDict[identityColumn];
            rowDict.Remove(identityColumn);
        }

        // Remplacement des FK par les nouveaux IDs
        foreach (var fk in fkInfos)
        {
            if (forceNullFK)
            {
                rowDict[fk.ColumnName] = "NULL";
                continue;
            }

            var oldFkValue = rowDict[fk.ColumnName];
            if (string.IsNullOrWhiteSpace(oldFkValue))
                continue;

            if (_idMappings.TryGetValue(fk.ReferencedTableName, out var map) &&
                map.TryGetValue(oldFkValue, out var newFkValue))
            {
                rowDict[fk.ColumnName] = newFkValue;
            }
            else if (fk.IsNullable)
            {
                rowDict[fk.ColumnName] = "NULL";
            }
            else
            {
                throw new Exception($"Mapping manquant pour FK {fk.ColumnName} ‚Üí {fk.ReferencedTableName}");
            }
        }

        // Colonnes & valeurs format√©es
        var (insertColumns, insertValues) = BuildInsertParameters(rowDict, tableName);

        // Appel de la proc√©dure stock√©e
        DynamicSql sql = new DynamicSql { Dsn = "PXE1_PXE" };

        string request = @"EXEC [dbo].[batch_safe_insert_with_type_conversion] 
              @TableName = $table$, 
              @Columns = $cols$, 
              @Values = $vals$,
              @HasIdentity = $identity$";

        sql.AddDirectRequest(request, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
        sql.SetSecureParam("table", tableName, true, 0);
        sql.SetSecureParam("cols", insertColumns, true, 0);
        sql.SetSecureParam("vals", insertValues, true, 0);
        sql.SetSecureParam("identity", hasIdentity ? 1 : 0, true, 0);

        sql.Execute();

        // Gestion du mapping des IDs g√©n√©r√©s
        if (hasIdentity)
        {
            string newId = sql.GetValueUsingColName(1, "NewID", 1, 1);

            if (string.IsNullOrEmpty(newId))
            {
                string errMsg = sql.GetValueUsingColName(1, "ErrorMessage", 1, 1);
                Console.WriteLine($"‚ö† Aucun NewID retourn√© pour {tableName} (ancienne ID: {oldId}) ‚Üí {errMsg}");
            }
            else if (!string.IsNullOrEmpty(oldId))
            {
                if (!_idMappings.ContainsKey(tableName))
                    _idMappings[tableName] = new Dictionary<string, string>();

                _idMappings[tableName][oldId] = newId;
            }
        }
    }
}
IF OBJECT_ID(N'[dbo].[batch_safe_insert_with_type_conversion]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[batch_safe_insert_with_type_conversion];
GO

CREATE PROCEDURE [dbo].[batch_safe_insert_with_type_conversion]
    @TableName NVARCHAR(128),
    @Columns NVARCHAR(MAX),
    @Values NVARCHAR(MAX),
    @HasIdentity BIT = 0
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @sql NVARCHAR(MAX);
    DECLARE @identityCol NVARCHAR(128);
    DECLARE @output TABLE (NewID INT);

    -- üîπ D√©tection de la colonne IDENTITY
    IF @HasIdentity = 1
    BEGIN
        SELECT TOP 1 @identityCol = COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = @TableName
          AND COLUMNPROPERTY(OBJECT_ID(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1;

        -- Si aucune colonne IDENTITY trouv√©e alors qu'on a @HasIdentity = 1
        IF @identityCol IS NULL
        BEGIN
            SELECT NULL AS NewID, 'Aucune colonne IDENTITY trouv√©e pour cette table' AS ErrorMessage;
            RETURN;
        END
    END

    -- üîπ Construction requ√™te d'insertion
    SET @sql = N'INSERT INTO ' + QUOTENAME(@TableName) + ' (' + @Columns + ') ';

    IF @HasIdentity = 1
        SET @sql += N'OUTPUT INSERTED.' + QUOTENAME(@identityCol) + ' AS NewID ';

    -- Conversion s√©curis√©e des valeurs
    DECLARE @convertedValues NVARCHAR(MAX) = N'';

    WITH ValueCTE AS (
        SELECT 
            value,
            ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn
        FROM STRING_SPLIT(REPLACE(@Values, '''', ''), ',')
    )
    SELECT @convertedValues = @convertedValues + 
           CASE 
               WHEN value LIKE '''%''' THEN
                   CASE 
                       WHEN TRY_CONVERT(DATETIME, REPLACE(value, '''', '')) IS NOT NULL 
                           THEN 'TRY_CONVERT(DATETIME, ' + value + ')'
                       WHEN TRY_CONVERT(DECIMAL(18,6), REPLACE(value, '''', '')) IS NOT NULL 
                           THEN 'TRY_CONVERT(DECIMAL(18,6), ' + value + ')'
                       ELSE value
                   END
               ELSE value
           END + ','
    FROM ValueCTE;

    SET @convertedValues = LEFT(@convertedValues, LEN(@convertedValues) - 1);

    SET @sql += N'SELECT ' + @convertedValues;

    BEGIN TRY
        IF @HasIdentity = 1
            INSERT INTO @output EXEC sp_executesql @sql;
        ELSE
            EXEC sp_executesql @sql;

        -- üîπ V√©rification du r√©sultat
        IF @HasIdentity = 1
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM @output)
            BEGIN
                SELECT NULL AS NewID, 'INSERT effectu√© mais aucun IDENTITY retourn√©' AS ErrorMessage;
                RETURN;
            END
            ELSE
            BEGIN
                SELECT NewID, NULL AS ErrorMessage FROM @output;
                RETURN;
            END
        END
        ELSE
        BEGIN
            SELECT NULL AS NewID, NULL AS ErrorMessage; -- Pas d'IDENTITY √† retourner
            RETURN;
        END
    END TRY
    BEGIN CATCH
        SELECT NULL AS NewID, ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
