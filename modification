private List<string> GetAllTables()
{
    var tables = new List<string>();

    try
    {
        // Essaye d'abord la procédure fournie (plus rapide / custom)
        DynamicSql sql = ExecuteProcedure("batch_select_all_tables");

        if (sql != null && sql.ReturnedRows(1, 1) > 0)
        {
            for (int i = 1; i <= sql.ReturnedRows(1, 1); i++)
            {
                var table = sql.GetValueUsingColName(i, "TABLE_NAME", 1, 1);
                if (string.IsNullOrWhiteSpace(table)) continue;

                // Filtre insensible à la casse
                if (_ignoredTables.Any(x => x.Equals(table, StringComparison.OrdinalIgnoreCase)))
                    continue;

                tables.Add(table);
            }

            return tables;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[GetAllTables] Proc batch_select_all_tables a échoué : {ex.Message}");
        // on continue vers le fallback
    }

    // --- Fallback : INFORMATION_SCHEMA.TABLES ---
    try
    {
        DynamicSql sql2 = new DynamicSql { Dsn = "PXE1_PXE" };
        sql2.AddDirectRequest(
            @"SELECT TABLE_NAME 
              FROM INFORMATION_SCHEMA.TABLES 
              WHERE TABLE_TYPE = 'BASE TABLE' 
                AND TABLE_SCHEMA = 'dbo'
              ORDER BY TABLE_NAME",
            MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
        sql2.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
        sql2.Execute(30000);

        for (int i = 1; i <= sql2.ReturnedRows(1, 1); i++)
        {
            var table = sql2.GetValueUsingColName(i, "TABLE_NAME", 1, 1);
            if (string.IsNullOrWhiteSpace(table)) continue;
            if (_ignoredTables.Any(x => x.Equals(table, StringComparison.OrdinalIgnoreCase)))
                continue;
            tables.Add(table);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[GetAllTables] Fallback INFORMATION_SCHEMA a échoué : {ex.Message}");
    }

    return tables;
}
