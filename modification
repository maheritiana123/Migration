# ==== Paramètres ====
$MinGB = 5          # seuil des "gros" fichiers (modifie si tu veux)
$OutCsv = "$([Environment]::GetFolderPath('Desktop'))\GrosFichiers_$($MinGB)GB.csv"

Write-Host "Analyse des fichiers > $MinGB GB ... (ça peut prendre un peu de temps)"

# ---- Lister les fichiers > MinGB ----
$bigFiles =
  Get-ChildItem C:\ -Recurse -Force -ErrorAction SilentlyContinue |
  Where-Object { $_.PSIsContainer -eq $false -and $_.Length -gt ($MinGB * 1GB) } |
  Sort-Object Length -Descending |
  Select-Object FullName,
                @{Name='Taille_GB';Expression={[math]::Round($_.Length/1GB,2)}},
                LastWriteTime

# Affiche en console (top 20) et exporte tout en CSV
$bigFiles | Select-Object -First 20 | Format-Table -AutoSize
$bigFiles | Export-Csv -NoTypeInformation -Encoding UTF8 $OutCsv
Write-Host "`n> Rapport complet exporté ici : $OutCsv"

# ---- Fonctions utiles ----
function Get-DirSizeGB($path){
  try {
    $sum = (Get-ChildItem $path -Recurse -Force -ErrorAction SilentlyContinue |
            Measure-Object Length -Sum).Sum
    if ($null -eq $sum) { return 0 }
    return [math]::Round($sum/1GB,2)
  } catch { return -1 }
}

# ---- Tailles de dossiers suspects ----
$checkPaths = @(
  "C:\Windows\Temp",
  "C:\Windows\Logs",
  "C:\Windows\SoftwareDistribution\Download",
  "C:\ProgramData",
  "C:\ProgramData\Package Cache",
  "C:\ProgramData\Microsoft",
  "$env:LOCALAPPDATA\Temp",
  "$env:USERPROFILE\AppData\Local\Packages",
  "$env:USERPROFILE\AppData\Local\Docker",
  "$env:USERPROFILE\AppData\Local\Microsoft\Windows\INetCache",
  "C:\Users"
)

Write-Host "`nTailles des dossiers suspects :"
$result = foreach($p in $checkPaths){
  [PSCustomObject]@{
    Dossier = $p
    Taille_GB = Get-DirSizeGB $p
  }
}
$result | Sort-Object Taille_GB -Descending | Format-Table -AutoSize

Write-Host "`nAstuce: si un fichier comme C:\Windows\MEMORY.DMP, un .vhdx, .etl ou .log géant apparaît, on peut le traiter au cas par cas."