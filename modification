private void ImportTableCommon(string tableName)
{
    var csvPath = Path.Combine(_importDirectory, $"{tableName}.csv");
    if (!File.Exists(csvPath))
    {
        Console.WriteLine($"‚ö† CSV introuvable : {tableName}");
        return;
    }

    var lines = File.ReadAllLines(csvPath);
    if (lines.Length < 2)
    {
        Console.WriteLine($"‚ö† CSV vide : {tableName}");
        return;
    }

    // Lecture de l'en-t√™te CSV
    var columnNames = lines[0].Split(';').Select(c => c.Trim()).ToList();

    // Info PK & FK
    var pkColumns = GetPrimaryKeyColumns(tableName);
    var identityColumn = GetIdentityColumn(tableName);
    var fkInfos = GetForeignKeyInfo(tableName);

    bool hasIdentity = !string.IsNullOrEmpty(identityColumn);

    for (int i = 1; i < lines.Length; i++)
    {
        var values = lines[i].Split(';').ToList();

        // Mapping colonnes/valeurs
        var rowDict = columnNames.Zip(values, (col, val) => new { col, val })
                                 .ToDictionary(x => x.col, x => x.val);

        // üîπ Remplacement des FK par les nouveaux IDs
        foreach (var fk in fkInfos)
        {
            var oldFkValue = rowDict[fk.ColumnName];
            if (string.IsNullOrWhiteSpace(oldFkValue))
                continue;

            if (_idMappings.TryGetValue(fk.ReferencedTableName, out var map) &&
                map.TryGetValue(oldFkValue, out var newFkValue))
            {
                rowDict[fk.ColumnName] = newFkValue;
            }
            else if (fk.IsNullable)
            {
                rowDict[fk.ColumnName] = "NULL";
            }
            else
            {
                throw new Exception($"Mapping manquant pour FK {fk.ColumnName} ‚Üí {fk.ReferencedTableName}");
            }
        }

        // Colonnes pour la proc√©dure
        var insertColumns = string.Join(",", rowDict.Keys.Select(c => $"[{c}]"));
        var insertValues = string.Join(",", rowDict.Values.Select(FormatValue));

        // Appel de la proc√©dure stock√©e
        var procSql = $"EXEC batch_safe_insert_with_type_conversion " +
                      $"@TableName = '{tableName}', " +
                      $"@Columns = '{insertColumns}', " +
                      $"@Values = '{insertValues}', " +
                      $"@HasIdentity = {(hasIdentity ? 1 : 0)}";

        DynamicSql sql = new DynamicSql();
        sql.Dsn = "PXE1_PXE";
        sql.AddDirectRequest(procSql, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
        sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
        sql.Execute(30000);

        // Si IDENTITY ‚Üí r√©cup√©rer le mapping
        if (hasIdentity)
        {
            string newId = sql.GetValueUsingColName(1, "NewID", 1, 1);
            string oldId = rowDict[identityColumn];

            if (!string.IsNullOrEmpty(newId) && !string.IsNullOrEmpty(oldId))
            {
                if (!_idMappings.ContainsKey(tableName))
                    _idMappings[tableName] = new Dictionary<string, string>();

                _idMappings[tableName][oldId] = newId;
            }
        }
    }
}
