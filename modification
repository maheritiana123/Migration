private void ImportTableCommon(string tableName, bool forceNullFK = false)
{
    Console.WriteLine("_______________________");
    Console.WriteLine($"Import table {tableName}");

    string csvPath = Path.Combine(_importPath, $"Export_Migration_{tableName}_{Environment.GetEnvironmentVariable("PFTLSITE")}.csv");
    if (!File.Exists(csvPath))
    {
        Console.WriteLine($"⚠ CSV introuvable : {tableName}");
        return;
    }

    var lines = File.ReadAllLines(csvPath);
    if (lines.Length < 2)
    {
        Console.WriteLine($"⚠ CSV vide : {tableName}");
        return;
    }

    var columnNames = lines[0].Split(';').Select(c => c.Trim()).ToList();
    var identityColumn = GetIdentityColumn(tableName);
    var fkInfos = GetForeignKeyInfo(tableName);

    bool hasIdentity = !string.IsNullOrEmpty(identityColumn);
    int insertedCount = 0;
    int duplicateCount = 0;

    Console.WriteLine($"{lines.Length - 1} lignes à importer...");

    // Préparer un batch complet
    List<string> batchRows = new List<string>();

    for (int i = 1; i < lines.Length; i++)
    {
        var values = lines[i].Split(';').ToList();
        if (values.Count != columnNames.Count)
        {
            Console.WriteLine($"[Erreur Structurelle] Ligne {i + 1} ignorée : colonnes CSV ({values.Count}) != colonnes table ({columnNames.Count})");
            continue;
        }

        var rowDict = columnNames.Zip(values, (col, val) => new { col, val })
                                 .ToDictionary(x => x.col, x => (object)x.val);

        string oldId = null;
        if (hasIdentity && rowDict.ContainsKey(identityColumn))
        {
            oldId = (rowDict[identityColumn] ?? "").ToString();
            rowDict.Remove(identityColumn);
        }

        // Remplacement des FK
        foreach (var fk in fkInfos)
        {
            if (!rowDict.ContainsKey(fk.ColumnName))
                continue;

            if (forceNullFK)
            {
                rowDict[fk.ColumnName] = null;
                continue;
            }

            var oldFkValue = (rowDict[fk.ColumnName] ?? "").ToString();
            if (string.IsNullOrWhiteSpace(oldFkValue))
            {
                rowDict[fk.ColumnName] = null;
                continue;
            }

            if (_idMappings.TryGetValue(fk.ReferencedTableName, out var map) &&
                map.TryGetValue(oldFkValue, out var newFkValue))
            {
                rowDict[fk.ColumnName] = newFkValue;
            }
            else if (IsForeignKeyNullable(fk))
            {
                rowDict[fk.ColumnName] = null;
            }
            else
            {
                throw new Exception($"Mapping manquant pour FK {fk.ColumnName} → {fk.ReferencedTableName} (table {tableName})");
            }
        }

        // Construction des tokens pour la PS
        List<string> tokens = new List<string>();
        foreach (var col in rowDict.Keys)
        {
            var formattedValue = FormatValueForSql(rowDict[col], GetColumnType(tableName, col));
            tokens.Add(formattedValue);
        }

        // Concatène les colonnes avec NCHAR(31)
        string rowToken = string.Join(((char)31).ToString(), tokens);
        batchRows.Add(rowToken);
    }

    // Concatène toutes les lignes avec NCHAR(30)
    string valuesBatch = string.Join(((char)30).ToString(), batchRows);

    // Exécution d'un seul batch
    DynamicSql sql = new DynamicSql { Dsn = "PXE1_PXE" };

    string request = @"EXEC [dbo].[batch_safe_insert_with_type_conversion] 
          @TableName = $table$, 
          @Columns = $cols$, 
          @ValuesBatch = $valsBatch$,
          @HasIdentity = $identity$,
          @IdentityCol = $identityCol$";

    sql.AddDirectRequest(request, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
    sql.SetSecureParam("table", tableName, true, 0);
    sql.SetSecureParam("cols", string.Join(",", rowDict.Keys.Select(c => $"[{c}]")), true, 0);
    sql.SetSecureParam("valsBatch", valuesBatch, true, 0);
    sql.SetSecureParam("identity", hasIdentity ? 1 : 0, true, 0);
    sql.SetSecureParam("identityCol", identityColumn ?? "", true, 0);
    sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));

    sql.Execute();

    // Lecture du résultat batch
    int nbRows = sql.GetNbRows();
    for (int r = 1; r <= nbRows; r++)
    {
        string newId = sql.GetValueUsingColName(r, "NewID", 1, 1);
        string errorMessage = sql.GetValueUsingColName(r, "ErrorMessage", 1, 1);

        if (!string.IsNullOrEmpty(errorMessage) && errorMessage.ToLower().Contains("doublon"))
        {
            duplicateCount++;
        }
        else
        {
            insertedCount++;
        }
    }

    Console.WriteLine($"✅ Table {tableName} : {insertedCount} lignes insérées, {duplicateCount} doublons ignorés.");
}