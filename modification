IF OBJECT_ID(N'[dbo].[batch_safe_insert_with_type_conversion]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[batch_safe_insert_with_type_conversion];
GO

CREATE PROCEDURE [dbo].[batch_safe_insert_with_type_conversion]
    @TableName      NVARCHAR(128),
    @Columns        NVARCHAR(MAX),   -- ex: [Col1],[Col2]
    @Values         NVARCHAR(MAX),   -- ex: SELECT 'v1','v2' UNION ALL SELECT ...
    @HasIdentity    BIT = 0
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @identityCol NVARCHAR(128) = NULL;
    DECLARE @pkCols NVARCHAR(MAX) = NULL;
    DECLARE @output TABLE (NewID INT);
    DECLARE @duplicateCount INT = 0;

    -- 1) Trouver colonne IDENTITY si nécessaire
    IF @HasIdentity = 1
    BEGIN
        SELECT TOP 1 @identityCol = COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = @TableName
          AND COLUMNPROPERTY(OBJECT_ID(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1;
    END

    -- 2) Colonnes PK/Unique hors identity
    SELECT @pkCols = STRING_AGG(QUOTENAME(c.COLUMN_NAME), ',')
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE c
        ON tc.CONSTRAINT_NAME = c.CONSTRAINT_NAME
       AND tc.TABLE_NAME = c.TABLE_NAME
    WHERE tc.TABLE_NAME = @TableName
      AND tc.CONSTRAINT_TYPE IN ('PRIMARY KEY', 'UNIQUE')
      AND c.COLUMN_NAME <> ISNULL(@identityCol, '');

    -- 3) Si PK/UK trouvé, compter les doublons
    IF @pkCols IS NOT NULL AND LEN(@pkCols) > 0
    BEGIN
        DECLARE @countSql NVARCHAR(MAX) =
            N'SELECT @dup = COUNT(*) FROM (' + @Values + N') src ' +
            N'JOIN ' + QUOTENAME(@TableName) + N' t ON ' +
            STRING_AGG('t.' + QUOTENAME(value) + ' = src.' + QUOTENAME(value), ' AND ')
        FROM STRING_SPLIT(@pkCols, ',') s;

        EXEC sp_executesql @countSql, N'@dup INT OUTPUT', @dup = @duplicateCount OUTPUT;
    END

    -- 4) Préparer l’INSERT (on exclut les doublons s’il y a PK/UK)
    DECLARE @insertSql NVARCHAR(MAX) = N'INSERT INTO ' + QUOTENAME(@TableName) + ' (' + @Columns + ') ';
    IF @HasIdentity = 1 AND @identityCol IS NOT NULL
        SET @insertSql += N'OUTPUT INSERTED.' + QUOTENAME(@identityCol) + ' AS NewID ';
    SET @insertSql += N'SELECT * FROM (' + @Values + N') AS src ';

    IF @pkCols IS NOT NULL AND LEN(@pkCols) > 0
    BEGIN
        SET @insertSql += N'WHERE NOT EXISTS (SELECT 1 FROM ' + QUOTENAME(@TableName) + ' t WHERE ' +
            STRING_AGG('t.' + QUOTENAME(value) + ' = src.' + QUOTENAME(value), ' AND ')
        FROM STRING_SPLIT(@pkCols, ',') s;
    END

    -- 5) Exécuter l’INSERT
    BEGIN TRY
        IF @HasIdentity = 1
            INSERT INTO @output EXEC sp_executesql @insertSql;
        ELSE
            EXEC sp_executesql @insertSql;

        -- Retourner résultat
        IF @HasIdentity = 1
            SELECT NewID, NULL AS ErrorMessage, @duplicateCount AS DuplicateCount FROM @output;
        ELSE
            SELECT NULL AS NewID, NULL AS ErrorMessage, @duplicateCount AS DuplicateCount;
    END TRY
    BEGIN CATCH
        SELECT NULL AS NewID, ERROR_MESSAGE() AS ErrorMessage, @duplicateCount AS DuplicateCount;
    END CATCH
END
GO