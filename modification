private void ImportTableCommon(string tableName, bool isPureRelation)
{
    var csvPath = Path.Combine(_importDirectory, $"{tableName}.csv");
    if (!File.Exists(csvPath))
    {
        Console.WriteLine($"‚ö† Fichier CSV introuvable pour {tableName}, import ignor√©.");
        return;
    }

    var lines = File.ReadAllLines(csvPath, Encoding.UTF8);
    if (lines.Length <= 1)
    {
        Console.WriteLine($"‚ö† CSV vide pour {tableName}");
        return;
    }

    var headers = lines[0].Split(';').Select(h => h.Trim()).ToArray();
    var tableColumns = GetTableColumnNames(tableName);

    var headerMap = headers
        .Select((name, idx) => new { name, idx })
        .ToDictionary(x => x.name, x => x.idx, StringComparer.OrdinalIgnoreCase);

    for (int lineIndex = 1; lineIndex < lines.Length; lineIndex++)
    {
        var cells = lines[lineIndex].Split(';');
        var insertValues = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);

        // üîπ Correspondance colonnes CSV -> colonnes table
        foreach (var col in tableColumns)
        {
            if (headerMap.TryGetValue(col, out var csvIndex) && csvIndex < cells.Length)
                insertValues[col] = string.IsNullOrEmpty(cells[csvIndex]) ? null : cells[csvIndex];
            else
                insertValues[col] = null;
        }

        // üîπ Gestion FK
        var fkInfos = GetForeignKeyInfo(tableName);
        foreach (var fk in fkInfos)
        {
            if (insertValues.TryGetValue(fk.ColumnName, out var val) && !string.IsNullOrEmpty(val))
            {
                if (_idMappings.TryGetValue(fk.ReferencedTableName, out var mapping) &&
                    mapping.TryGetValue(val, out var newId))
                    insertValues[fk.ColumnName] = newId;
                else if (fk.IsNullable)
                    insertValues[fk.ColumnName] = null;
                else
                    throw new Exception($"[Erreur FK] Valeur '{val}' introuvable pour {fk.ColumnName} dans {tableName}");
            }
        }

        // üîπ Construction requ√™te INSERT
        var colNames = string.Join(", ", insertValues.Keys.Select(c => $"[{c}]"));
        var colValues = string.Join(", ", insertValues.Values.Select(v => v == null ? "NULL" : $"'{v.Replace("'", "''")}'"));
        var insertSql = $"INSERT INTO [{tableName}] ({colNames}) VALUES ({colValues})";

        // üîπ Ex√©cution via DynamicSql
        DynamicSql sql = new DynamicSql();
        sql.Dsn = "PXE1_PXE";
        sql.AddDirectRequest(insertSql, MidwSqlXmlMode.MIDW_SQL_XMLMODE_RAW);
        sql.SetSite(Environment.GetEnvironmentVariable("PFTLSITE"));
        sql.Execute(30000);
    }
}
public void PerformMigration()
{
    Console.WriteLine("üöÄ D√©but de la migration...");

    // ‚úÖ Transaction globale
    BeginTransaction();

    try
    {
        // üìå Fusion de toutes les listes en un ordre pr√©cis
        var allTables = new List<(string Name, string Type)>
        {
            // Tables sans d√©pendances
        };
        allTables.AddRange(_importOrder.Select(t => (t, "Table normale")));
        allTables.AddRange(_pureRelations.Select(t => (t, "Relation pure")));
        allTables.AddRange(_extendedRelations.Select(t => (t, "Relation √©tendue")));

        foreach (var (tableName, type) in allTables)
        {
            try
            {
                Console.WriteLine($"‚ñ∂Ô∏è Import {type} : {tableName}");
                ImportTableCommon(tableName, isPureRelation: type == "Relation pure");
            }
            catch (Exception ex)
            {
                throw new Exception($"[Erreur Import {type}] {tableName} ‚Üí {ex.Message}", ex);
            }
        }

        // ‚úÖ Validation si tout s'est bien pass√©
        CommitTransaction();
        Console.WriteLine("‚úÖ Migration termin√©e avec succ√®s.");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå Migration annul√©e : {ex.Message}");
        RollbackTransaction();
    }
}
